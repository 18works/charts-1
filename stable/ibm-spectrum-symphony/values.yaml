###############################################################################
######################## IBM Spectrum Symphony. ###############################
###############################################################################

###############################################################################
## for github.com charts
###############################################################################
# Specify architecture (amd64, ppc64le, s390x) and weight to be
# used for scheduling as follows :
#   0 - Do not use
#   1 - Least preferred
#   2 - No preference
#   3 - Most preferred
## comment out or remove if github.ibm chart
arch:
  amd64: "2 - No preference"
  ppc64le: "2 - No preference"

###############################################################################
## Common image variables
###############################################################################
image:
  repository: ibmcom/spectrum-symphony
  tag: latest
  ## Specify a imagePullPolicy - Always, Never, or IfNotPresent. Defaults to Always
  pullPolicy: Always

cluster:
  productName: "IBM Spectrum Symphony"
  productVersion: "7.2.0.2"
# name, ibm product #, version, license, counter
  productID: IBMSpectrumSymphony_5725G86_7202_CE_000
  pvc:
    size: 5Gi
    useDynamicProvisioning: true
    # specify the storageClassName you want to use
    # if you don't specify a storageClassName it will use the default
    storageClassName: ""
    # Specify the name of the Existing Claim to be used by your application
    # empty string means don't use an existing claim
    existingClaimName: ""
    # if your not using dynamic provisioning, you can use selectors to
    # refine the binding process. You cannot specify a selector if your using dynamic provisioning!
    selector:
      label: ""
      value: ""

master:
  replicaCount: 1
  resources:
    requests:
      cpu: 1000m
      memory: 2048Mi
    limits:
      cpu: 1000m
      memory: 2048Mi
  serviceType: NodePort
  uiName: webgui
  uiProto: TCP
  uiPort: 8443
  uiTargetPort: 8443
  egoRestName: egorest
  egoRestProto: TCP
  egoRestPort: 8543
  egoRestTargetPort: 8543
  symRestName: symrest
  symRestProto: TCP
  symRestPort: 8050
  symRestTargetPort: 8050

compute:
  replicaCount: 1
  resources:
    requests:
      cpu: 500m
      memory: 1024Mi
    limits:
      cpu: 500m
      memory: 1024Mi
  minReplicas: 1
  maxReplicas: 64
  targetCPUUtilizationPercentage: 70

client:
  replicaCount: 1
  resources:
    requests:
      cpu: 500m
      memory: 1024Mi
    limits:
      cpu: 500m
      memory: 1024Mi
  serviceType: NodePort
  sshName: ssh
  sshProto: TCP
  sshPort: 22
  sshTargetPort: 22
